const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');
const multer = require('multer');

const app = express();
const port = 5001; // –Ü–Ω—à–∏–π –ø–æ—Ä—Ç –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

// –î–æ–∑–≤–æ–ª—è—î–º–æ CORS –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ –∑ http://localhost:3000
app.use(cors({ origin: 'http://localhost:3000' }));

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –ø–∞–ø–∫—É uploads-seller
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads-seller/'); // –Ü–Ω—à–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  }
});
const upload = multer({ storage });

// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use('/uploads-seller', express.static(path.join(__dirname, 'uploads-seller')));

const productsFile = path.join(__dirname, 'products-seller.json');

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø–∏—Å—É —É products-seller.json
const readProducts = () => {
  try {
    if (!fs.existsSync(productsFile)) return [];
    const data = fs.readFileSync(productsFile, 'utf-8');
    return data ? JSON.parse(data) : [];
  } catch (err) {
    console.error('Error reading products-seller.json:', err);
    return [];
  }
};

const writeProducts = (products) => {
  try {
    fs.writeFileSync(productsFile, JSON.stringify(products, null, 2));
  } catch (err) {
    console.error('Error writing to products-seller.json:', err);
  }
};

// üîπ –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
app.get('/', (req, res) => {
  res.send('<h1>–°–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü—ñ–≤ –ø—Ä–∞—Ü—é—î! üöÄ</h1><p>API: <a href="/api/seller-products">/api/seller-products</a></p>');
});

// üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –ø—Ä–æ–¥–∞–≤—Ü—ñ–≤
app.get('/api/seller-products', (req, res) => {
  res.json(readProducts());
});

// üîπ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–≤—Ü—è –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
app.post('/api/seller-products/upload', upload.single('image'), (req, res) => {
  if (!req.file) return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—É–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π' });

  const imageUrl = `/uploads-seller/${req.file.filename}`;
  res.json({ imageUrl });
});

app.post('/api/seller-products', (req, res) => {
  const { name, price, description, imageUrl, sellerEmail } = req.body;
  if (!name || !price || !sellerEmail) return res.status(400).json({ error: '–ù–µ –≤—Å—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ' });

  const products = readProducts();
  const newProduct = { id: Date.now(), name, price, description, imageUrl, sellerEmail };
  products.push(newProduct);
  writeProducts(products);

  res.status(201).json(newProduct);
});

// üîπ –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–≤—Ü—è –∑–∞ name
app.delete('/api/seller-products/:name', (req, res) => {
  const productName = req.params.name;
  let products = readProducts();

  const productIndex = products.findIndex(product => product.name === productName);
  if (productIndex === -1) return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });

  products.splice(productIndex, 1);
  writeProducts(products);
  
  res.status(200).json({ message: '–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ' });
});

// üîπ –û–±—Ä–æ–±–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
app.use((req, res) => {
  res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
});

// üîπ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü—ñ–≤ –ø—Ä–∞—Ü—é—î: http://localhost:${port}`);
});
